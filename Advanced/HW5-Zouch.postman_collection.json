{
	"info": {
		"_postman_id": "417d6573-d31d-4cca-939a-6016955bcc1e",
		"name": "HW5-Zouch",
		"description": "This collection tests the API specification given for Assignment 3.\nIn order to run this collection, you need an environment which has the following 3 environment variables pre-defined:\n\napp_url\n- Set this to your app. E.g., when running locally set it to http://localhost:8080. When running the app on GCP. set it to https://myapp.appsport.com\n\ninvalid_boat_id\n- Set it to a value that's not an ID of any boat in your project. I have set it to 1 and that should work for you as well.\n- \n\ninvalid_slip_id\n- Set it to a value that's not an ID of any slip in your porject. I have set it to 1 and that should work for you as well.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "add boat 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e3b0e608-4c42-4ac7-9f53-a78b47e66259",
						"exec": [
							"pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add another boat(extra attribute) 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "80312b87-f9b8-41d2-a258-5c3f3cdec7b0",
						"exec": [
							"pm.environment.set(\"boat2_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey II\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Cruise\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(999);",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(undefined);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Odyssey II\",\r\n    \"type\": \"Cruise\",\r\n    \"length\": 999,\r\n    \"color\": \"Red\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with missing attributes 400 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "05f0b8d3-32b5-4afa-a4dc-5f4294d9ef85",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with unavailable name 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fe9f90a1-54c5-4fa2-962b-b7a835631fdb",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The name of boat is not available\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Odyssey\",\r\n    \"type\": \"Cruise\",\r\n    \"length\": 999\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with invalid accept types 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "78de847c-50df-4113-b698-00c0c1fca0b8",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Only JSON is supported as returned content type\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accpet",
						"value": "text/html, application/xhtml+xml, application/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Odyssey\",\r\n    \"type\": \"Cruise\",\r\n    \"length\": 999\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat JSON 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1638c7de-89c3-4113-bd39-e30186c1b0d9",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/JSON",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat HTML 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9537d17b-a7f1-44b4-bbdf-6fc10f518aaf",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html "
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat with invalid ID 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "db907851-2300-42d7-9c93-3bd7fc8b88b5",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html ",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat with invalid type 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c49f8ed3-9b0c-4be0-a7c7-6787a7ad0026",
						"exec": [
							"pm.test(\"406  Not Acceptable\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Only JSON and HTML are supported as returned content type\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/xhtml+xml, application/xml,text/css",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch edit boat 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "01e56090-ddda-4238-a9f2-6e65a54929b8",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Mega Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch edit boat with extra attribute 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e63b999-be3d-4eed-bcfe-b4b31291e6a0",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Mega Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(undefined);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200,\r\n  \"color\": \"White\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch edit boat with unavailable name 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "42310ed1-af07-4988-b679-18de6fd15921",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The name of boat is not available\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey II\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch edit boat ID 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "20f9e36e-ce26-426b-8147-339cafa7b05a",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Updating ID is not allowed\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 123\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch boat with no attributes 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a70c5e56-f2c7-4301-b16c-13a1f387b66f",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object needs at least one of the attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch boat with invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f903904e-8d73-4f15-8697-9be8b8d58a7e",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"dummy\",\r\n   \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch boat with invalid type 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7aa71ae0-8ccd-4db4-9b30-f6143bcf8aa4",
						"exec": [
							"pm.test(\"406  Not Acceptable\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Only JSON is supported as returned content type\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"dummy\",\r\n   \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "fully edit boat with unavailable name 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "531cdc75-d5c3-40b3-be70-8b9e88913b84",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The name of boat is not available\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "fully edit boat ID 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6d31ff27-56eb-47e1-b309-e3bbe5b0ead4",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Updating ID is not allowed\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 123,\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "fully edit boat 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "34ccecdb-8a64-43ed-b148-a88b8d397fa0",
						"exec": [
							"pm.test(\"303 status code\", function () {",
							"    pm.response.to.have.status(303);",
							"});",
							"",
							"pm.test(\"303 see other\", function () {",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.environment.get(\"boat_id\");",
							"    pm.response.to.have.header(\"Location\");",
							"    //pm.expect(pm.response.header.Location.to.eq(self_url));",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey update\",\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "fully edit boat with extra attribute 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "144595e5-c802-4bc4-9df8-b8e9d543f68a",
						"exec": [
							"pm.test(\"303 status code\", function () {",
							"    pm.response.to.have.status(303);",
							"});",
							"",
							"pm.test(\"303 see other\", function () {",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.environment.get(\"boat_id\");",
							"    pm.response.to.have.header(\"Location\");",
							"    //pm.expect(pm.response.header.Location.to.eq(self_url));",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey update\",\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put edit boat with missing attribute 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cfba2467-477e-4fd1-95bf-c27d323e0acd",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put edit boat with invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f353d71-40f8-4ba9-8985-49ba53a8e414",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"dummy\",\r\n   \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put edit boat with invalid type 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fb0359b6-fcaf-4082-af2f-cf723f784d64",
						"exec": [
							"pm.test(\"406  Not Acceptable\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Only JSON is supported as returned content type\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"dummy\",\r\n   \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put all boats 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b44a837d-3d95-4763-91b5-e2180452d5f8",
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"",
							"pm.test(\"405 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Editing all boats is not allowed\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "99638c3f-cb09-4ad2-bbb4-2a0f822007fb",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat2 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7a39bff1-d1be-4ed4-859a-fc7a6741dc9d",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat with invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d8a3703a-786f-42fd-84da-aca2fe8da8f5",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete all boats 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "327a94c2-9e61-4595-9839-53e7dc9a21f5",
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"",
							"pm.test(\"405 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Deleting all boats is not allowed\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cc5990bb-39a8-48f9-b790-a0ec4a612784",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ef6b8d89-dde2-4dab-bd43-ef474e1d3fb1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}